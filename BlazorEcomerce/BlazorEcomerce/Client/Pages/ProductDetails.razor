@page "/product/{id:int}"
@using BlazorEcomerce.Shared.Models
@inject IProductService _ProductService

@if(Product==null)
{
    <div class="loader"> </div>
     <h1>@message</h1>

}
else
{
    <div class="container-fluid p-5 text-white text-center Baner">
        <h1>@Product.Title</h1>
    </div>
    <div class="container mt-5 ">
                @if(Product.Variants.Count>1)
            {
                <div class="col-sm-6">
                    <select class="form-select-lg" @bind="CurentTypeId">
                        @foreach(var variant in Product.Variants)
                        {
                            <option value=@variant.ProductTypeId>@variant.ProductType.Name</option>
                        }
                    </select>
                </div>
            }
    </div>
    <div class="container mt-5 ">
        <div class="row">
        <div class="col-sm-6">
            <img src="@Product.ImgURL" class="img-thumbnail rounded-start  h-75 w-100"/>
        </div>
        <div class="col-sm-6">
        <p>@Product.Description</p>
        </div> 
            @if(GetSelectedVariant()!=null)
            {
                if(GetSelectedVariant().OriginalPrice>GetSelectedVariant().Price)
                {
                     <p class="oldPrice"><b>Old PRice:   </b>$@GetSelectedVariant().OriginalPrice</p>
                }
        <p class="newPrice"><b>Price:   </b>$@GetSelectedVariant().Price</p>
            }    
  </div>
  
</div>
<a href="/">BaCK</a>

  
}



@code 
{
    private Product? Product = null;
    private string message="";
    private int CurentTypeId = 1;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        message = "Loadaing";
        var result = await _ProductService.GetProduct(Id);
        if(!result.Success)
        {
           message = "No such Product";
        }
        else
        {
            Product = result.Value;
            if(Product.Variants.Count>0)
            {
                CurentTypeId = Product.Variants[0].ProductTypeId; 
            }
        }
    }

    private ProductVariant GetSelectedVariant()
    {
            var variant = Product.Variants.FirstOrDefault(v => v.ProductTypeId == CurentTypeId);
            return variant;
    }
}
