@using BlazorEcomerce.Shared.Services
@inject IProductService _ProductService;
@implements IDisposable 


@if(_ProductService.Products==null || _ProductService.Products.Count==0)
{
    <div class="loader"> @_ProductService.message </div>
}
else
{
<div class="container mt-5 ">
    @foreach(var product in _ProductService.Products)
    {
       
        <div class="row">
        <div class="col-sm-6">
            <h3>@product.Title</h3>
             <a href="/product/@product.Id"><img src="@product.ImgURL" class="img-thumbnail rounded-start  h-75 w-100"/></a>
            </div>
        <div class="col-sm-6">
        <h2>Description</h2>
        <br>
        <p>@product.Description</p>
        <p><b>Price:   </b> @GetPriceText(product)</p>
        </div>
        </div>
       
    }
</div>
}




@code
{

    protected override void OnInitialized()
    {
        _ProductService.ProductChanged += StateHasChanged;
    }
    public void Dispose()
    {
        _ProductService.ProductChanged -= StateHasChanged;
    }

    private string GetPriceText(Product product)
    {
        var variants = product.Variants;
        if (variants.Count == 0)
            return string.Empty;
        if(variants.Count==1)
            return $"{variants[0].Price}";
        decimal min = variants.Min(p => p.Price);
        decimal max = variants.Max(p => p.Price);
        return $"Starting at: {min} to {max}";

    }
}
